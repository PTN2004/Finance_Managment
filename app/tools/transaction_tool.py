from pydantic import BaseModel, Field
from langchain.tools import BaseTool
from langchain_core.tools.base import ArgsSchema
from typing import Optional, Type

from app.models.transaction import Transaction, TransactionCategory, TransactionType
from app.core.database import get_db


class RecordTransactionInput(BaseModel):
    description: str = Field(..., description="M√¥ t·∫£ giao d·ªãch, v√≠ d·ª•: Mua c√† ph√™, Nh·∫≠n l∆∞∆°ng")
    amount: float = Field(..., description="S·ªë ti·ªÅn c·ªßa giao d·ªãch")
    category: str = Field(..., description="Danh m·ª•c giao d·ªãch, v√≠ d·ª•: ƒÇn u·ªëng, L∆∞∆°ng, Gi·∫£i tr√≠")
    type: str = Field(..., description="Lo·∫°i giao d·ªãch: income ho·∫∑c expense. H√£y suy lu·∫≠n n·∫øu kh√¥ng r√µ.")
    
    # C√°c tr∆∞·ªùng kh√¥ng b·∫Øt bu·ªôc
    payment_method: Optional[str] = Field(None, description="Ph∆∞∆°ng th·ª©c thanh to√°n n·∫øu ng∆∞·ªùi d√πng cung c·∫•p (v√≠ d·ª•: Ti·ªÅn m·∫∑t, Momo)")
    location: Optional[str] = Field(None, description="ƒê·ªãa ƒëi·ªÉm n·∫øu c√≥ (v√≠ d·ª•: Highland Coffee, Vincom B√† Tri·ªáu)")


class RecordTransactionTool(BaseTool):
    name:str = "record_transaction"
    description:str = """Ghi l·∫°i chi ti√™u ho·∫∑c thu nh·∫≠p c·ªßa ng∆∞·ªùi d√πng"""
    args_schema: Type[BaseModel] = RecordTransactionInput
    return_direct:bool = True
    user_id:int
    def _run(self, description: str, amount: float, category: str,  type: str, payment_method: str = None, location:str = None) -> str:
       
        db = next(get_db())
        try:
            print("‚úÖ GOI HAM RECORD")    
            transaction = Transaction(
                user_id = self.user_id,
                description=description,
                amount=amount,
                category=category,
                type=type,
                payment_method=payment_method,
                location=location
            )
            db.add(transaction)
            db.commit()
            db.refresh()
            return "‚úÖ ƒê√£ ghi nh·∫≠n giao d·ªãch th√†nh c√¥ng!  üí∏ {description} - {amount:,.0f}ƒë"
        except Exception as e:
            db.rollback()
            return f"ƒê√£ x·∫£y ra l·ªói khi ghi nh·∫≠n giao d·ªãch: {str(e)}"

    def _arun(self, *args, **kwargs):
        raise NotImplementedError("Tool n√†y kh√¥ng h·ªó tr·ª£ ch·∫°y b·∫•t ƒë·ªìng b·ªô.")

